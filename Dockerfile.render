# Optimized Dockerfile for Render deployment
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite \
    curl \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./
COPY frontend/package*.json ./frontend/
COPY containers/mainCodebase/package*.json ./containers/mainCodebase/

# Install dependencies (use npm install to avoid lock file issues)
RUN npm install --only=production
RUN cd frontend && npm install --only=production
RUN cd containers/mainCodebase && npm install --only=production

# Copy application code
COPY backend/ ./backend/
COPY containers/mainCodebase/ ./containers/mainCodebase/
COPY cli/ ./cli/
COPY frontend/ ./frontend/

# Build frontend
RUN cd frontend && npm run build

# Create necessary directories
RUN mkdir -p ./database ./uploads ./containers ./logs

# Set permissions
RUN chown -R node:node /app
USER node

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Start script
CMD ["npm", "start"]
